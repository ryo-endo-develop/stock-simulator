import os
from typing import Dict

import pandas as pd
import streamlit as st

# „Éá„Éº„Çø‰øùÂ≠ò„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆ‰ΩúÊàê
DATA_DIR = "data"
if not os.path.exists(DATA_DIR):
    os.makedirs(DATA_DIR)

FIXED_STOCK_FILE = os.path.join(DATA_DIR, "fixed_stock_analysis.csv")
STOCK_SELECTION_FILE = os.path.join(DATA_DIR, "stock_selection_analysis.csv")


class DataManager:
    """„Éá„Éº„ÇøÁÆ°ÁêÜ„ÇØ„É©„Çπ"""

    @staticmethod
    def initialize_csv_files():
        """CSV„Éï„Ç°„Ç§„É´„ÇíÂàùÊúüÂåñÔºà„Éï„Ç°„Ç§„É´„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅÆ„ÅøÔºâ"""
        # Âõ∫ÂÆöÈäòÊüÑÂàÜÊûêCSV„Éï„Ç°„Ç§„É´„ÅÆÂàùÊúüÂåñ
        if not os.path.exists(FIXED_STOCK_FILE):
            fixed_columns = [
                'execution_date', 'model_id', 'stock_code', 'buy_date', 'buy_price',
                'sell_date', 'sell_price', 'predicted_price', 'profit_loss',
                'return_rate', 'prediction_accuracy', 'period_days', 'notes'
            ]
            pd.DataFrame(columns=fixed_columns).to_csv(FIXED_STOCK_FILE, index=False, encoding='utf-8-sig')
            st.info(f"Âõ∫ÂÆöÈäòÊüÑÂàÜÊûêÁî®CSV„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü: {FIXED_STOCK_FILE}")
        
        # ÈäòÊüÑÈÅ∏ÂÆöÂàÜÊûêCSV„Éï„Ç°„Ç§„É´„ÅÆÂàùÊúüÂåñ
        if not os.path.exists(STOCK_SELECTION_FILE):
            selection_columns = [
                'execution_date', 'analysis_period', 'model_id', 'stock_code',
                'selection_reason', 'buy_date', 'buy_price', 'sell_date', 'sell_price',
                'profit_loss', 'return_rate', 'period_days', 'notes'
            ]
            pd.DataFrame(columns=selection_columns).to_csv(STOCK_SELECTION_FILE, index=False, encoding='utf-8-sig')
            st.info(f"ÈäòÊüÑÈÅ∏ÂÆöÂàÜÊûêÁî®CSV„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü: {STOCK_SELECTION_FILE}")

    @staticmethod
    def load_data(file_path: str) -> pd.DataFrame:
        """CSV„Éï„Ç°„Ç§„É´„Åã„Çâ„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø"""
        # „Éï„Ç°„Ç§„É´„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅÆ„ÅøÂàùÊúüÂåñ
        if not os.path.exists(file_path):
            DataManager.initialize_csv_files()
        
        try:
            df = pd.read_csv(file_path)
            
            # Á©∫„ÅÆ„Éï„Ç°„Ç§„É´Ôºà„Éò„ÉÉ„ÉÄ„Éº„ÅÆ„ÅøÔºâ„ÅÆÂ†¥Âêà„ÅØÁ©∫„ÅÆDataFrame„ÇíËøî„Åô
            if len(df) == 0:
                return pd.DataFrame()
            
            # execution_date„Ç´„É©„É†„ÅåÂ≠òÂú®„Åó„ÄÅÂÄ§„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅÆ„ÅøÂ§âÊèõ
            if "execution_date" in df.columns and not df["execution_date"].isna().all():
                df["execution_date"] = pd.to_datetime(df["execution_date"])
            
            return df
        except Exception as e:
            st.error(f"„Éá„Éº„ÇøË™≠„ÅøËæº„Åø„Ç®„É©„Éº: {str(e)}")
            return pd.DataFrame()

    @staticmethod
    def save_fixed_stock_analysis(data: Dict) -> bool:
        """Âõ∫ÂÆöÈäòÊüÑÂàÜÊûê„Éá„Éº„Çø„Çí‰øùÂ≠ò"""
        try:
            # „Éï„Ç°„Ç§„É´„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅÆ„ÅøÂàùÊúüÂåñ
            if not os.path.exists(FIXED_STOCK_FILE):
                DataManager.initialize_csv_files()
            
            # Êó¢Â≠ò„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø
            try:
                df = pd.read_csv(FIXED_STOCK_FILE)
            except:
                df = pd.DataFrame()

            # Êñ∞„Åó„ÅÑ„Éá„Éº„Çø„ÇíËøΩÂä†
            new_row = pd.DataFrame([data])
            if not df.empty:
                df = pd.concat([df, new_row], ignore_index=True)
            else:
                df = new_row

            # CSV„Å´‰øùÂ≠ò
            df.to_csv(FIXED_STOCK_FILE, index=False, encoding="utf-8-sig")
            
            # ‰øùÂ≠òÁ¢∫Ë™ç
            saved_df = pd.read_csv(FIXED_STOCK_FILE)
            st.success(f"‚úÖ Âõ∫ÂÆöÈäòÊüÑÂàÜÊûê„Éá„Éº„Çø„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü„ÄÇÔºàÁ∑è„Éá„Éº„ÇøÊï∞: {len(saved_df)}‰ª∂Ôºâ")
            
            return True
        except Exception as e:
            st.error(f"Âõ∫ÂÆöÈäòÊüÑÂàÜÊûê„Éá„Éº„Çø‰øùÂ≠ò„Ç®„É©„Éº: {str(e)}")
            return False

    @staticmethod
    def save_stock_selection_analysis(data: Dict) -> bool:
        """ÈäòÊüÑÈÅ∏ÂÆöÂàÜÊûê„Éá„Éº„Çø„Çí‰øùÂ≠ò"""
        try:
            # „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±„ÇíË°®Á§∫
            st.write("üîç ‰øùÂ≠òÂá¶ÁêÜÈñãÂßã...")
            st.write(f"‰øùÂ≠ò„Éá„Éº„Çø: {data}")
            
            # „Éï„Ç°„Ç§„É´„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅÆ„ÅøÂàùÊúüÂåñ
            if not os.path.exists(STOCK_SELECTION_FILE):
                st.write("üìÅ CSV„Éï„Ç°„Ç§„É´„ÅåÂ≠òÂú®„Åó„Å™„ÅÑ„Åü„ÇÅ„ÄÅÊñ∞Ë¶è‰ΩúÊàê„Åó„Åæ„Åô...")
                DataManager.initialize_csv_files()
            
            # Êó¢Â≠ò„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø
            try:
                df = pd.read_csv(STOCK_SELECTION_FILE)
                st.write(f"üìñ Êó¢Â≠ò„Éá„Éº„ÇøË™≠„ÅøËæº„ÅøÂÆå‰∫Ü„ÄÇÁèæÂú®„ÅÆ„Éá„Éº„ÇøÊï∞: {len(df)}‰ª∂")
            except Exception as read_error:
                st.write(f"‚ö†Ô∏è Êó¢Â≠ò„Éá„Éº„ÇøË™≠„ÅøËæº„Åø„Ç®„É©„Éº: {str(read_error)}")
                df = pd.DataFrame()

            # Êñ∞„Åó„ÅÑ„Éá„Éº„Çø„ÇíËøΩÂä†
            new_row = pd.DataFrame([data])
            st.write(f"‚ûï Êñ∞„Åó„ÅÑ„Éá„Éº„Çø„Çí‰ΩúÊàê: {new_row}")
            
            if not df.empty:
                df = pd.concat([df, new_row], ignore_index=True)
            else:
                df = new_row
            
            st.write(f"üìù ÁµêÂêàÂæå„ÅÆ„Éá„Éº„ÇøÊï∞: {len(df)}‰ª∂")

            # CSV„Å´‰øùÂ≠ò
            df.to_csv(STOCK_SELECTION_FILE, index=False, encoding="utf-8-sig")
            st.write(f"üíæ CSV„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠òÂÆå‰∫Ü: {STOCK_SELECTION_FILE}")
            
            # ‰øùÂ≠òÁ¢∫Ë™ç
            saved_df = pd.read_csv(STOCK_SELECTION_FILE)
            st.success(f"‚úÖ ÈäòÊüÑÈÅ∏ÂÆöÂàÜÊûê„Éá„Éº„Çø„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü„ÄÇÔºàÁ∑è„Éá„Éº„ÇøÊï∞: {len(saved_df)}‰ª∂Ôºâ")
            
            # ‰øùÂ≠ò„Åï„Çå„Åü„Éá„Éº„Çø„ÅÆÊúÄÂæå„ÅÆË°å„ÇíË°®Á§∫
            if not saved_df.empty:
                st.write("üìã ‰øùÂ≠ò„Åï„Çå„ÅüÊúÄÊñ∞„Éá„Éº„Çø:")
                st.dataframe(saved_df.tail(1))
            
            return True
        except Exception as e:
            st.error(f"ÈäòÊüÑÈÅ∏ÂÆöÂàÜÊûê„Éá„Éº„Çø‰øùÂ≠ò„Ç®„É©„Éº: {str(e)}")
            import traceback
            st.error(f"Ë©≥Á¥∞„Ç®„É©„Éº: {traceback.format_exc()}")
            return False

    @staticmethod
    def delete_record(file_path: str, index: int) -> bool:
        """„É¨„Ç≥„Éº„Éâ„ÇíÂâäÈô§"""
        try:
            df = DataManager.load_data(file_path)
            if not df.empty and 0 <= index < len(df):
                df = df.drop(index=index).reset_index(drop=True)
                df.to_csv(file_path, index=False, encoding="utf-8-sig")
                return True
            return False
        except Exception as e:
            st.error(f"„Éá„Éº„ÇøÂâäÈô§„Ç®„É©„Éº: {str(e)}")
            return False

    @staticmethod
    def export_data(df: pd.DataFrame, filename: str) -> bool:
        """„Éá„Éº„Çø„Çí„Ç®„ÇØ„Çπ„Éù„Éº„Éà"""
        try:
            export_path = os.path.join(DATA_DIR, f"export_{filename}")
            df.to_csv(export_path, index=False, encoding="utf-8-sig")
            return True
        except Exception as e:
            st.error(f"„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Ç®„É©„Éº: {str(e)}")
            return False

    @staticmethod
    def get_file_paths():
        """„Éï„Ç°„Ç§„É´„Éë„Çπ„ÇíÂèñÂæó"""
        return {
            "fixed_stock": FIXED_STOCK_FILE,
            "stock_selection": STOCK_SELECTION_FILE,
        }

    @staticmethod
    def get_debug_info():
        """„Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±„ÇíÂèñÂæó"""
        info = {
            "data_dir_exists": os.path.exists(DATA_DIR),
            "fixed_file_exists": os.path.exists(FIXED_STOCK_FILE),
            "selection_file_exists": os.path.exists(STOCK_SELECTION_FILE),
            "data_dir_path": os.path.abspath(DATA_DIR),
            "fixed_file_path": os.path.abspath(FIXED_STOCK_FILE),
            "selection_file_path": os.path.abspath(STOCK_SELECTION_FILE)
        }
        
        # „Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫ÊÉÖÂ†±
        if os.path.exists(FIXED_STOCK_FILE):
            info["fixed_file_size"] = os.path.getsize(FIXED_STOCK_FILE)
            try:
                fixed_df = pd.read_csv(FIXED_STOCK_FILE)
                info["fixed_data_count"] = len(fixed_df)
            except:
                info["fixed_data_count"] = "Ë™≠„ÅøËæº„Åø„Ç®„É©„Éº"
                
        if os.path.exists(STOCK_SELECTION_FILE):
            info["selection_file_size"] = os.path.getsize(STOCK_SELECTION_FILE)
            try:
                selection_df = pd.read_csv(STOCK_SELECTION_FILE)
                info["selection_data_count"] = len(selection_df)
            except:
                info["selection_data_count"] = "Ë™≠„ÅøËæº„Åø„Ç®„É©„Éº"
            
        return info

    @staticmethod
    def check_file_contents():
        """„Éï„Ç°„Ç§„É´ÂÜÖÂÆπ„Çí„ÉÅ„Çß„ÉÉ„ÇØ"""
        results = {}
        
        for file_type, file_path in [("fixed_stock", FIXED_STOCK_FILE), ("stock_selection", STOCK_SELECTION_FILE)]:
            if os.path.exists(file_path):
                try:
                    with open(file_path, 'r', encoding='utf-8-sig') as f:
                        content = f.read()
                    results[file_type] = {
                        "exists": True,
                        "size": len(content),
                        "lines": len(content.split('\n')),
                        "first_100_chars": content[:100]
                    }
                except Exception as e:
                    results[file_type] = {
                        "exists": True,
                        "error": str(e)
                    }
            else:
                results[file_type] = {"exists": False}
        
        return results
